void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	HAL_UART_Receive_DMA(&huart3, rt_data+offset,48);
	offset+=48;
	if(offset==144){
		offset=0;
	}

}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM2)
    {
    	          cog=((double)TCOG*3.1415926)/180.0;
    	    	  cog*=(10*10*10*10);
    	    	  txdata[11]=(uint8_t)(((uint16_t)cog & 0xFF00)>>8);
    	    	  txdata[12]=(uint8_t)((uint16_t)cog & 0x00FF);
    	            if(FSOG>99){
    	            	FSOG/=10;
    	            }
    	          sog=(double)TSOG+((double)FSOG)/100.0;
    	          sog*=100;
    	          txdata[13]=(uint8_t)(((uint16_t)sog & 0xFF00)>>8);
    	          txdata[14]=(uint8_t)((uint16_t)sog & 0x00FF);
    	          latitude=(double)TLatitude + (((double)FLatitude)/100000.0);
    	          latitude = convertDMCtoDecimal(latitude);
    	          latitude*=10000000;
    	          txdata[1]=(uint8_t)((int32_t)latitude >> 24);
    	          txdata[2]=(uint8_t)((int32_t)((int32_t)latitude & 0x00FF0000)>>16);
    	          txdata[3]=(uint8_t)((int32_t)((int32_t)latitude & 0x0000FF00)>>8);
    	          txdata[4]=(uint8_t)((int32_t)((int32_t)latitude & 0x000000FF));
    	          longitude=(double)TLongitude + (((double)FLongitude)/100000.0);
    	          longitude = convertDMCtoDecimal(longitude);
    	          longitude*=10000000;
    	          txdata[5]=(uint8_t)((int32_t)longitude >> 24);
    	          txdata[6]=(uint8_t)((int32_t)((int32_t)longitude & 0x00FF0000)>>16);
    	          txdata[7]=(uint8_t)((int32_t)((int32_t)longitude & 0x0000FF00)>>8);
    	          txdata[8]=(uint8_t)((int32_t)((int32_t)longitude & 0x000000FF));
    	          yaw=((double)TYAW*3.1415926)/180;
    	          yaw*=(10*10*10*10);
    	          if(yawsign==1){
    	        	  yaw*=-1;
    	          }
    	          txdata[9]=(uint8_t)(((int16_t)yaw & 0xFF00)>>8);
    	           txdata[10]=(uint8_t)((int16_t)yaw & 0x00FF);
    	           txdata[0]=0x53;
    	           txdata[15]=0x58;

    	           HAL_UART_Transmit(&hlpuart1,txdata, 16, 1000);


    }
}



 HAL_UART_Receive_DMA(&huart3, rt_data+offset,48);
  offset+=48;
  if(offset==144){
  		offset=0;
  	}











// HAL_UART_Receive(&huart3, rt_data,128, 1000);
    // HAL_UART_Receive_DMA(&huart1,rt_data, 500);
            for (uint16_t i = 0; i < 500 - 6; i++)
            {
                if (rt_data[i] == '$')
                {
                    if (memcmp(&rt_data[i], target, 6) == 0)
                    {


                        start = (char *)&rt_data[i];
                        comma_count = 0;
                        field_index = 0;


                        while (*start && (start - (char *)&rt_data[i]) < (500 - i))
                        {
                            if (*start == ',')
                            {
                                comma_count++;
                                if (comma_count == 3 || comma_count == 5 || comma_count == 7 || comma_count == 8)
                                {
                                    field_start[field_index] = start + 1;
                                }
                                else if (comma_count == 4 || comma_count == 6 || comma_count == 8 || comma_count == 9)
                                {
                                    field_end[field_index] = start;
                                    field_index++;
                                    if (field_index == 4) break;
                                }
                            }
                            start++;
                        }

                        if (field_start[0] && field_end[0])
                        {
                            char latitude_str[20];
                            memset(latitude_str, 0, sizeof(latitude_str));
                            strncpy(latitude_str, field_start[0], field_end[0] - field_start[0]);

                            char *dot_pos = strchr(latitude_str, '.');
                            if (dot_pos)
                            {
                                *dot_pos = '\0';
                                 TLatitude = (uint16_t)atoi(latitude_str);
                                 FLatitude = (uint32_t)atoi(dot_pos + 1);


                            }
                        }

                        if (field_start[1] && field_end[1])
                        {
                            char longitude_str[20];
                            memset(longitude_str, 0, sizeof(longitude_str));
                            strncpy(longitude_str, field_start[1], field_end[1] - field_start[1]);

                            char *dot_pos = strchr(longitude_str, '.');
                            if (dot_pos)
                            {
                                *dot_pos = '\0';
                                TLongitude = (uint16_t)atoi(longitude_str);
                                FLongitude = (uint32_t)atoi(dot_pos + 1);


                            }
                        }

                        if (field_start[2] && field_end[2])
                        {
                            char sog_str[20];
                            memset(sog_str, 0, sizeof(sog_str));
                            strncpy(sog_str, field_start[2], field_end[2] - field_start[2]);

                            double SOG = atof(sog_str) * 0.5144;

                             TSOG = (uint16_t)SOG;
                             FSOG = (uint16_t)((SOG - TSOG) * 10000);


                        }

                        if (field_start[3] && field_end[3])
                        {
                            char cog_str[20];
                            memset(cog_str, 0, sizeof(cog_str));
                            strncpy(cog_str, field_start[3], field_end[3] - field_start[3]);

                            char *dot_pos = strchr(cog_str, '.');
                            if (dot_pos)
                            {
                                *dot_pos = '\0';
                                TCOG = (uint8_t)atoi(cog_str);
                                FCOG = (uint8_t)atoi(dot_pos + 1);


                            }
                        }
                    }
                }
            }



            for (uint16_t i = 0; i < 500 - 5; i++)
            {
                if (memcmp(&rt_data[i], target_yaw, 5) == 0)
                {
                    char *yaw_start = (char *)&rt_data[i];
                    int comma_count = 0;
                    char *yaw_field_start = NULL;
                    char *yaw_field_end = NULL;

                    while (*yaw_start && (yaw_start - (char *)&rt_data[i]) < (500 - i))
                    {
                        if (*yaw_start == ',')
                        {
                            comma_count++;
                            if (comma_count == 3) yaw_field_start = yaw_start + 1;
                            else if (comma_count == 4)
                            {
                                yaw_field_end = yaw_start;
                                break;
                            }
                        }
                        yaw_start++;
                    }

                    if (yaw_field_start && yaw_field_end)
                    {
                        yawsign = (*yaw_field_start == '-') ? 1 : 0;
                        if (*yaw_field_start == '+' || *yaw_field_start == '-') yaw_field_start++;

                        char yaw_str[20];
                        memset(yaw_str, 0, sizeof(yaw_str));
                        strncpy(yaw_str, yaw_field_start, yaw_field_end - yaw_field_start);

                        char *dot_pos = strchr(yaw_str, '.');
                        if (dot_pos)
                        {
                            *dot_pos = '\0';
                            TYAW = (uint16_t)atoi(yaw_str);
                            FYAW = (uint16_t)atoi(dot_pos + 1);


                        }
                    }
                }
            }



uint8_t run = 0;
uint8_t               TxData[8];
volatile uint8_t               RxData[8];
uint8_t enable[6] = {0};
int32_t speed[6] = {0};
uint32_t IDs[4] = {0};
uint16_t pos[6] = {0};
uint16_t pos_old[6] = {0};
int32_t turn[6] = {0};
uint32_t              TxMailbox;
int32_t ref[6] = {0};
uint8_t rx_data[1] = {0};
uint8_t s_pos = 0;
uint8_t rx_count = 0;
uint8_t tx_data[40] = {0};
uint8_t s_flag = 0;
uint8_t msg_length = 0;
uint8_t can_send_msg = 0;
int32_t axis[6] = {0};
uint8_t buffer[50] = {0};
uint32_t ID = 0;
uint8_t rxgnssdata[128];
uint8_t vel_control = 1;
int32_t base_turn = 0;
int32_t base_offset = 0;
int32_t speed_tmp[6] = {0};
uint8_t gripper_speed = 5;
int32_t absolute_pos_for_speed[6] = {0};
uint8_t enable_pos_for_speed[6] = {0};

double convertDMCtoDecimal(double dmc) {
	int degrees = (int)(dmc / 100);
	    double minutes_with_seconds = dmc - (degrees * 100);

	    int minutes = (int)minutes_with_seconds;
	    double seconds = (minutes_with_seconds - minutes) * 60;

	    return degrees + (minutes / 60.0) + (seconds / 3600.0);
	}



/*
 * 103.18 * gear1 (16.67) = 1720
 * 143.31 * gear2 (41) = 5875.71
 * 126.11 * gear3 (50) = 6300.55
 * 180 * gear4 (28) = 5040
 * 183.44 * gear5 (22.27) = 4085.22
 * 360 * gear6 (7.8) = 2808
 */


int i = 0;

float Kp = 12;
int32_t absolute_pos[6] ={0};
int32_t fixed_pos[6] = {0};
int32_t absolute_ref_tmp[6] = {0};



//for GNSS
uint8_t rt_data[144]={0};
const char target[] = "$GNRMC";
const char target_yaw[] = "$PTNL";
char *start=NULL ;
int comma_count=0;
char *field_start[4];
char *field_end[4];
int field_index = 0;
char latitude_str[20]={0};
char *dot_pos=0;
uint16_t TLatitude=0;
uint32_t FLatitude=0;
uint16_t TLongitude=0;
uint32_t FLongitude=0;
uint16_t TSOG=0;
uint16_t FSOG=0;
uint8_t TCOG=0;
uint8_t FCOG=0;
int8_t yawsign=0;
uint16_t TYAW=0;
uint16_t FYAW=0;
uint8_t txdata[16];
uint8_t offset=0;

double cog;
double sog;
double latitude;
double longitude;
double yaw;





















